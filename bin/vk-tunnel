#!/usr/bin/env node

const packageJson = require('../package.json');
const WebSocketClient = require('websocket').client;
const WebSocket = require('ws');
const pino = require('pino');
const fetch = require('node-fetch');
const prompt = require('prompts');
const chalk = require('chalk');
const Configstore = require('configstore');
const vault = new Configstore(packageJson.name, {});
const httpParser = require('http-string-parser');
const fs = require('fs');
const querystring = require('querystring');
const axios = require('axios');

const logger = pino({
  prettyPrint: {colorize: true},
  level: process.env.LOGLEVEL || 'info',
  base: {},
  timestamp: pino.stdTimeFunctions.isoTime
});

let configJSON = {};
let configJSONLocal = {};

if (fs.existsSync('./vk-tunnel-config.json')) {
  configJSON = require('require-module')('./vk-tunnel-config.json');
}
if (fs.existsSync('./vk-tunnel-config.local.json')) {
  configJSONLocal = require('require-module')('./vk-tunnel-config.local.json');
}

const mergedJSON = {
  ...configJSON,
  ...configJSONLocal
};

const cfg = mergedJSON || {};

const TUNNEL_APP_ID = 7357112;
const CODE_SUCCESS = 200;
const CLIENT_VERSION = 1;

const API_HOST = cfg.api_host || 'https://api.vk.com/method/';
const OAUTH_HOST = cfg.oauth_host || 'https://oauth.vk.com/';
const API_VERSION = cfg.api_version || '5.100';

const SEQ_BEGIN = 0;
const SEQ_END = 8;

const MSG_TYPE_BEGIN = 8;
const MSG_TYPE_END = 9;

const PAYLOAD_BEGIN = 9;

const ACCEPT_ENCODING = 'Accept-Encoding';
const DISABLE_COMPRESS = 'gzip;q=0,deflate;q=0';

const OAUTH_USER_REVOKE_TOKEN_ERROR = 5;

async function auth() {
  const getAuthCode = await fetch(OAUTH_HOST + 'get_auth_code?scope=offline&client_id=' + TUNNEL_APP_ID);
  const getAuthCodeResult = await getAuthCode.json();

  if (getAuthCodeResult.error !== void 0) {
    return Promise.reject("Failed auth code " + JSON.stringify(getAuthCodeResult.error));
  }

  if (getAuthCodeResult.response !== void 0) {
    logger.error('fail, get_auth_code response ', getAuthCodeResult);
    return Promise.reject("Empty auth response " + getAuthCodeResult.response);
  }

  if (getAuthCodeResult.auth_code) {
    const {auth_code, device_id} = getAuthCodeResult;

    const url = OAUTH_HOST + 'code_auth?stage=check&code=' + auth_code;

    let handled = false;
    do {
      const promptQuestion = await prompt({
        type: 'confirm',
        name: 'result',
        initial: true,
        message: chalk.yellow('Please open and approve authentication ', url)
      });

      if (!promptQuestion.result) {
        return Promise.reject("Empty auth response " + promptQuestion.result);
      }

      const codeAuthToken = await fetch(OAUTH_HOST + 'code_auth_token?device_id=' + device_id + '&client_id=' + TUNNEL_APP_ID);
      const codeAuthTokenResult = await codeAuthToken.json();

      if (codeAuthToken.status !== CODE_SUCCESS) {
        logger.error('code_auth_token.status: ', codeAuthToken.status, codeAuthTokenResult);
        continue;
      }

      if (codeAuthTokenResult.access_token || codeAuthTokenResult.user_id) {
        handled = true;
      }

      return Promise.resolve(codeAuthTokenResult);

    } while (handled === false);
  }
}

async function api(method, params) {
  params['v'] = API_VERSION;
  params['access_token'] = cfg.access_token;

  if (!cfg.access_token) {
    logger.error('access_token is missing');
    return false;
  }

  const queryParams = querystring.stringify(params);
  try {
    const query = await fetch(API_HOST + method + '?' + queryParams);
    const res = await query.json();
    if (res.error !== void 0) {
      if (res.error.error_code === OAUTH_USER_REVOKE_TOKEN_ERROR) {
        vault.delete('access_token');
        vault.delete('user_id');

        delete cfg.access_token;
        delete cfg.user_id;
      }
      logger.error(chalk.red(res.error.error_code + ': ' + res.error.error_msg));
      logger.warn(chalk.yellow('Previous settings has been removed.'));
      return false;
    }

    if (res.response !== void 0) {
      return res.response;
    }
  } catch (e) {
    logger.error(e);
  }
}

async function getTunnelToken() {
  if (!cfg.access_token && vault.get('access_token')) {
    cfg.access_token = vault.get('access_token');
    cfg.user_id = vault.get('user_id');
  }

  if (!cfg.access_token) {
    logger.info('Try to retrieve access token...');
    const {access_token, user_id} = await auth();
    cfg.access_token = access_token;
    cfg.user_id = user_id;
    vault.set('access_token', access_token);
    vault.set('user_id', user_id);
  }

  const params = {
    version: CLIENT_VERSION,
  };

  const app_id = cfg.app_id;
  if (app_id) {
    params.app_id = app_id;
  }

  const endpoints = cfg.endpoints;
  if (endpoints) {
    params.endpoints = endpoints.join(',');
  }

  const staging = cfg.staging;
  if (staging) {
    params.staging = staging;
  }

  const response = await api('apps.getTunnelToken', params);
  if (response.token) {
    cfg.tunnelToken = response.token;
    cfg.hostSuffix = response.suffix;
    cfg.tunnelUrlFromAPI = response.tunnel_url;
    cfg.wsAddr = response.host;


    cfg.wsURL = response.url;

    const warnings = response.warnings;
    if (warnings) {
      warnings.map((warning) => logger.error(warning));
    }

    logger.debug('tunnel token', cfg.tunnelToken);
    return cfg.tunnelToken;
  } else {
    const retriedToken = await getTunnelToken();
    if (retriedToken) {
      return retriedToken;
    }

    logger.error('Can\'t retrieve tunnel token');
    process.exit(1);
  }
}


function filterHeaders(payload, proxyHost) {
  return payload
    .replace(/Accept-Encoding:.*/, ACCEPT_ENCODING + ': ' + DISABLE_COMPRESS)
    .replace(/Host: .*/, 'Host: ' + proxyHost)
}


function getHelpMessage() {
  return '\n' +
    'Example vk-tunnel --host=localhost --port=10888:\n\n' +
    'Environment variables and options:\n' +
    chalk.yellow(
      '--host (PROXY_HOST)\t\t- host of your application (for example: localhost)\n' +
      '--port (PROXY_POST)\t\t- port of your application (for example: 10888)\n' +
      '--http-protocol (PROXY_HTTP_PROTO)\t- http/https (by default: http)\n' +
      '--ws-protocol (PROXY_WS_PROTO)\t\t- ws/wss (by default: ws)\n' +
      '--timeout (PROXY_TIMEOUT)\t\t- timeout for requests to your application (by default: 5000)\n'
    );
}

function parseOptions() {
  for (let i = 2; i < process.argv.length; i++) {
    const [option, value] = process.argv[i].split('=');
    if (option === '-h') {
      console.log(getHelpMessage());
      process.exit(0);
    }

    switch (option) {
      case '--port':
        process.env.PROXY_PORT = value;
        break;
      case '--host':
        process.env.PROXY_HOST = value;
        break;
      case '--ws-protocol':
        process.env.PROXY_WS_PROTO = value;
        break;
      case '--http-protocol':
        process.env.PROXY_HTTP_PROTO = value;
        break;
      case '--insecure':
        process.env.NODE_TLS_REJECT_UNAUTHORIZED = value === '1' ? '0' : '1';
        break;
      case '--timeout':
        process.env.PROXY_TIMEOUT = value;
        break;
    }
  }
}

async function run() {
  parseOptions();

  const tunnelToken = await getTunnelToken();

  const WS_URL = cfg.wsURL;
  const WS_ADDRESS = cfg.wsAddr;
  const PROXY_HOST = process.env.PROXY_HOST || 'localhost';
  const PROXY_HTTP_PROTO = process.env.PROXY_HTTP_PROTO || 'http';
  const PROXY_WS_PROTO = process.env.PROXY_WS_PROTO || 'ws';
  const PROXY_PORT = process.env.PROXY_PORT || '10888';
  const PROXY_TIMEOUT = parseInt(process.env.PROXY_TIMEOUT) || 5000;

  const url = WS_ADDRESS + '/' + WS_URL;
  logger.debug('initialize', url);

  const TYPE_HTTP = '\0';
  const TYPE_WEBSOCKET = '\1';
  const TYPE_CLOSE = "\b";

  const map = {};
  const connections = {};

  const client = new WebSocketClient();
  client.connect(url, null, null, {
    "UserID": cfg.user_id,
    "Token": tunnelToken
  });
  client.on('connectFailed', function(error) {
    logger.error('Connect Error: ' + error.toString());
  });
  let mainSocket = null;

  client.on('connect', function(connection) {
    mainSocket = connection.socket;
    logger.debug('connected to', url);

    console.log('\n' +
      chalk.blue(
        ' _____ _____    _____ _____ _____ _____ _____ __    \n' +
        '|  |  |  |  |  |_   _|  |  |   | |   | |   __|  |   \n' +
        '|  |  |    -|    | | |  |  | | | | | | |   __|  |__ \n' +
        ' \\___/|__|__|    |_| |_____|_|___|_|___|_____|_____|\n' +
        '\n')
    );

    console.log('open: ' + cfg.tunnelUrlFromAPI);

    connection.on('close', (code) => {
      logger.info('disconnected, code:', code);
    });
    connection.on('error', (error) => {
      logger.error('wsMain error', error);
    });
    connection.on('message', async (data) => {
      const query = data.binaryData.toString();
      const seq = query.slice(SEQ_BEGIN, SEQ_END);
      logger.debug('ws from seq: ', seq);
      const msgType = query.slice(MSG_TYPE_BEGIN, MSG_TYPE_END);
      const payload = query.slice(PAYLOAD_BEGIN);
      const endpoint = payload.split(' ')[1];

      if (TYPE_HTTP !== msgType) {
        const filteredPayload = filterHeaders(payload, PROXY_HOST);

        if (TYPE_CLOSE === msgType) {
          logger.debug('ws close', seq);
          if (connections[seq]) {
            connections[seq].close();
          }

          return;
        }

        connections[seq].send(filteredPayload, {}, () => {
          logger.debug('WS REQUEST', 'seq: ' + seq, msgType, endpoint, filteredPayload);
        })
      }

      if (typeof data === 'object') {
        if (TYPE_HTTP === msgType) {
          payload.split('\r');
          if (connections[seq]) {
            logger.info(new Date().toString(), 'connection already exists', seq, data.toString());
          }

          let query = payload.toString();
          let rawResponse = '';
          let parsedRequest = httpParser.parseRequest(query);
          parsedRequest.headers['Host'] = PROXY_HOST;
          parsedRequest.headers[ACCEPT_ENCODING] = DISABLE_COMPRESS;

          const upgradeHeader = parsedRequest.headers['Upgrade'] || '';
          const isWebsocketUpgrade = upgradeHeader.toLowerCase() === 'websocket';
          if (isWebsocketUpgrade) {
            logger.debug('upgrade to websocket ', endpoint);
            logger.debug(query);

            const tunnelUrl = `${PROXY_WS_PROTO}://${PROXY_HOST}:${PROXY_PORT}${endpoint}`;
            if (connections[seq]) {
              map[seq] = endpoint;
              logger.debug('upgrade request', seq.toString(), msgType.charCodeAt(0), endpoint);
            }
            logger.debug('create connection ', seq);

            connections[seq] = new WebSocket(tunnelUrl, [], {});
            map[seq] = tunnelUrl;
            connections[seq].on('error', (msg) => {
              logger.error('Connection error for ' + seq, msg);
            });

            connections[seq].on('upgrade', (msg) => {
              let response = ['HTTP/1.1 101 Switching Protocols'];
              let keys = Object.keys(msg.headers);
              for (let i = 0; i < keys.length; i++) {
                response.push(`${keys[i]}:${msg.headers[keys[i]]}`);
              }
              response.push('\n');
              connection.sendUTF(seq + TYPE_HTTP + response.join('\n'), () => {
                logger.debug('send reply upgrade', seq, response.toString());
              });
            });

            logger.debug('ws connect', tunnelUrl);
            connections[seq].on('open', () => {
              connections[seq].on('message', (data) => {
                logger.debug('incoming ws message from service', seq, data);
                connection.sendUTF(seq + TYPE_WEBSOCKET + data, () => {
                  logger.debug('send reply', seq, data);
                });
              });
            });

            return;
          }

          let error;
          let response = await axios({
            url: `${PROXY_HTTP_PROTO}://${PROXY_HOST}:${PROXY_PORT}${parsedRequest.uri}`,
            data: parsedRequest.body,
            headers: parsedRequest.headers,
            method: parsedRequest.method,
            responseType: 'arraybuffer',
            timeout: PROXY_TIMEOUT,
            validateStatus: function(status) {
              return status >= 200 && status < 500;
            },
          }).catch(function(e) {
            logger.error('502, Error:', e.message);
            error = {
              status: 502,
              statusText: 'Bad gateway',
              headers: {
                'content-type': 'text/html',
              },
              data: Buffer.from('Bad gateway', 'utf8')
            };
          });

          if(!response) {
            response = error;
          }
          rawResponse = `HTTP/1.1 ${response.status}  ${response.statusText}\r\n`;
          let keys = Object.keys(response.headers);
          for (let i = 0; i < keys.length; i++) {
            if (keys[i] === 'transfer-encoding') {
              continue;
            }

            if (keys[i] === 'content-length' && response.headers.hasOwnProperty('transfer-encoding')) {
              rawResponse += `content-length: ${response.data.length}\r\n`;
              continue;
            }
            rawResponse += `${keys[i]}:${response.headers[keys[i]]}\r\n`;
          }
          rawResponse += '\r\n';

          const buffer = Buffer.concat([
            Buffer.from(seq, 'utf8'),
            Buffer.from(msgType, 'utf8'),
            Buffer.from(rawResponse),
            response.data
          ]);

          connection.sendBytes(buffer, () => {
            logger.debug('REQUEST', 'seq:' + seq, 'type:' + msgType.charCodeAt(0), 'endpoint:' + endpoint, data.toString());
            const realIp = parsedRequest['headers']['X-Real-Ip'] || '-';
            const statusCode = response.status || '-';
            const host = parsedRequest['headers']['Host'] || '-';
            const method = parsedRequest['method'] || '-';
            const uri = parsedRequest['uri'] || '-';
            const ua = parsedRequest['headers']['User-Agent'] || '-';
            const length = response.data.length;
            logger.info(`${realIp} ${statusCode} ${host} ${method} ${uri} ${ua} ${length}`);
          });
        }
      } else {
        connection.sendBytes('', () => {
          logger.debug('pong');
        })
      }
    });
  });

}

run().then().catch((e) => { logger.error(e); });
